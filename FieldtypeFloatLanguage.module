<?php namespace ProcessWire;

require_once(wire('config')->paths->root . 'wire/modules/LanguageSupport/FieldtypeLanguageInterface.php'); 

/**
 * Multi-language capable float field
 *
 * ProcessWire 3.x, Copyright 2016 by Ryan Cramer
 * https://processwire.com
 *
 *
 */

class FieldtypeFloatLanguage extends FieldtypeFloat implements FieldtypeLanguageInterface {

	public static function getModuleInfo() {
		return array(
			'title' => 'Float (Multi-language)',
			'version' => 1,
			'summary' => 'Field that stores a floating point (decimal) number in multiple languages',
			'permanent' => false,
			'requires' => array('LanguageSupportFields'),
			);
	}

	/**
	 * Sanitize value for storage
	 * 
	 * @param Page $page
	 * @param Field $field
	 * @param LanguagesValueInterface|float $value
	 * @return LanguagesPageFieldValue
	 *
	 */
	public function sanitizeValue(Page $page, Field $field, $value) {
		foreach($value as $languageName => $languageValue) {
			$languageName = $this->wire('languages')->get($languageName)->name;
			if(!strlen("$languageValue")) $value->$languageName = '';
			if(!is_float($languageValue) && !is_int($languageValue)) {
				$value->$languageName = $this->wire('sanitizer')->float((string) $languageValue, array('blankValue' => ''));
			}
			if(is_null($field->precision)) {
				$value->$languageName = (float) $languageValue;
			} else {
				$value->$languageName = round((float) $languageValue, $field->precision);
			}
		}
		return $value;
	}


	/**
	 * Return the database schema in specified format
	 * 
	 * @param Field $field
	 * @return array
	 *
	 */
	public function getDatabaseSchema(Field $field) {
		$schema = parent::getDatabaseSchema($field);
		$languageSupport = $this->wire('modules')->get('LanguageSupport'); 
		foreach($languageSupport->otherLanguagePageIDs as $languageID) {
			$schema['data' . $languageID] = 'float';
			$schema['keys']["data{$languageID}"] = "KEY `data{$languageID}` (`data{$languageID}`)";
		}
		return $schema;
	}

	/**
	 * Format value for output, basically typecasting to a float and sending to textformatters from FieldtypeFloat
	 * 
	 * @param Page $page
	 * @param Field $field
	 * @param LanguagesValueInterface|float $value
	 * @return float
	 *
	 */
	public function sleepValue(Page $page, Field $field, $value) {
		$precision = $field->precision;
		$sleepValue = [];
		foreach($value as $languageName => $languageValue) {
			$language = wire('languages')->get($languageName);
			if(!$language->id) continue; 
			if(is_null($precision)) $precision = self::getPrecision($languageValue);
			if($language->id == wire('languages')->get("default")->id){
				if(!is_string($languageValue)) $sleepValue['data'] = number_format($languageValue, $precision, '.', '');
			}else{
				if(!is_string($languageValue)) $sleepValue['data'.$language->id] = number_format($languageValue, $precision, '.', '');
			}
		}
		return $sleepValue; 
	}
}